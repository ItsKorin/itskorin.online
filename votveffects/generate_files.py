#!/usr/bin/env python3
import os
import json
from pathlib import Path

def generate_files_js(pub_dir='pub', output_file='files.js'):
    """
    Generate a JavaScript file containing the directory structure of the pub directory.
    
    Args:
        pub_dir (str): Path to the public directory to scan
        output_file (str): Path to the output JS file
    """
    file_list = []
    pub_path = Path(pub_dir)
    
    if not pub_path.exists():
        print(f"Error: Directory '{pub_dir}' does not exist")
        return False
    
    for root, dirs, files in os.walk(pub_path):
        # Convert to relative path
        rel_root = Path(root).relative_to(pub_path)
        
        # Add directories
        for dir_name in dirs:
            dir_path = rel_root / dir_name
            file_list.append({
                'name': dir_name,
                'type': 'directory',
                'path': f"{dir_path}/"
            })
        
        # Add files
        for file_name in files:
            file_path = rel_root / file_name
            file_list.append({
                'name': file_name,
                'type': 'file',
                'path': str(file_path)
            })
    
    # Sort files: directories first, then alphabetical
    file_list.sort(key=lambda x: (x['type'] != 'directory', x['path'].lower()))
    
    # Generate JavaScript content
    js_content = f"// This file is auto-generated by generate_files.py\nwindow.FILE_LISTING = {json.dumps(file_list, indent=4)};"
    
    # Write to output file
    with open(output_file, 'w') as f:
        f.write(js_content)
    
    print(f"Successfully generated {output_file} with {len(file_list)} entries")
    return True

if __name__ == '__main__':
    import argparse
    
    parser = argparse.ArgumentParser(description='Generate files.js for the file browser')
    parser.add_argument('--pub-dir', default='pub', help='Path to the public directory')
    parser.add_argument('--output', default='files.js', help='Output JavaScript file path')
    
    args = parser.parse_args()
    
    if generate_files_js(args.pub_dir, args.output):
        print("File browser data generation complete!")
    else:
        print("File browser data generation failed.")